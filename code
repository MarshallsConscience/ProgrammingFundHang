""" Welcome to the interactive hangman game, designed by Maria Marshall and Abdi Mohamud for Cw2.
    To begin, just press run the program! If you would like to change the first word the player has to guess, 
    change the value of "word", afther the first game has been played, if you choose 'y' when given the option
    to play again, the secret word will be chosen at random, from a text file. You will be able to see your game stats
    whe you decide to quit the game. Good luck!
"""

import random 

"""" The global variable used in the game, each time a letter is (correctly) entered, it will be added to lettersUsed. """
lettersUsed=[]
totalGames = 0
word = "emmanuel"
wins = 0


def is_secret_guessed(secret_word,letters_guessed):
    """this function takes every letter in secret word and then cross checks if it is in the list of letters guessed 
    if a single letter is missing then the function returns false else it returns true. this function also clears the parameters of the game"""
    
    for letter in secret_word:
        if letter not in letters_guessed:
            return False
    return True

def get_current_guess(secret_word,letters_guessed):
    """"this function takes every letter that is not there then returns secret word with the missing letters being replaced with a _
    #it does this by looping through every letter in secret word"""
    for i in secret_word:
        if i not in letters_guessed:
            secret_word=secret_word.replace(i,"_")
    return secret_word

def first_game(secret_word):
    """this function starts up the game and tells the user how many guesses they have
    #for this function i have given the the attempts being the length of the word plus 3 additional chances
    it also prints how many guess the user has plus the the conditions for winning."""

    global lettersUsed
    global wins

    
    lettersUsed.clear()
    guesses_remaining = len(secret_word) + 3
   
   
    """the code below give the conditions of how the user will and the conditions of the input, such as the user cant give an empty space
    it, the user cant repeat a letter and only takes the first character of any word written except the secret word written as a whole."""
    print("The secret word has ",len(secret_word)," characters")
    while guesses_remaining > 0:
        print("You have ",guesses_remaining," guesses left.")
        user_input= input().lower()
        while user_input == "":
            print("You can't have an empty guess! \nTry again")
            print(get_current_guess(secret_word,lettersUsed))
            guesses_remaining -=1
            print("You have ",guesses_remaining," guesses left.")
            user_input= input().lower()
            if guesses_remaining <= 1:
                return quit_game("Out of guesses. You lose...")
   
        while (user_input[0] in lettersUsed) and (user_input != secret_word):
            print("you've already guessed this letter before")
            print(get_current_guess(secret_word,lettersUsed))
            guesses_remaining -=1
            print("You have ",guesses_remaining," guesses left.")
            user_input= input().lower()
            if guesses_remaining <= 1:
                return quit_game("Out of guesses. You lose...")
  
        while (len(user_input) != 1) and (user_input != secret_word):
            print("That was more than one letter, but it wasnt the secret word!\nI'll take '" + user_input[0] + "' as your guess" )
            lettersUsed.append((user_input[0]))
            print(get_current_guess(secret_word,lettersUsed))
            guesses_remaining -=1
            print("You have ",guesses_remaining," guesses left.")
            user_input= input().lower()
            if guesses_remaining <= 1:
                return quit_game("Out of guesses. You lose...")

        lettersUsed.append((user_input[0]))
        guesses_remaining -=1
        print(get_current_guess(secret_word,lettersUsed))
        
        if user_input == secret_word:
            print("You guessed correctly")
            return quit_game("You win!")
            break
        for i in get_current_guess(secret_word,lettersUsed):
            if get_current_guess(secret_word,lettersUsed) in secret_word:
                return quit_game("You win!")
    if is_secret_guessed(secret_word,lettersUsed) == True:
        return quit_game("You win!")
    else:
        return quit_game("You lose..")

def load_words(fileName): 
    """" This function takes in one argument "filName" and checks if the file exists, if not it will print the error message.
         If found it opens it in read mode and saves it as a variable "wordfile".
         it reads each line and strips it of its whitespace, then assignes the value (now in a list form) to "myWords"
         It then takes in the length of the list (how many items are present) and assigns the value to wordsPresent
         the values returned are: the amount of words present & the list of words itself
         It then calls the choose_secret_word() function.
    """
    try:
        with open(fileName, 'r') as wordFile:
            myWords = [line.strip() for line in wordFile]
            wordsPresent = len(myWords)
            wordFile.close()
            return wordsPresent,  myWords
    except FileNotFoundError:
        print("This file does not exist!")
        
def choose_secret_word():
    """" This function takes the list of words from the load_words function and selects a random word from the list and returns it as a string  """
    wordList = load_words("words.txt")[1]
    randomWord =  [random.choice(wordList)]
    secretWord = ''.join(randomWord)
    return secretWord

def second_game():
    """ this function takes the random word returned from the choose_secret_word function and calls the first_game, passing in the new random word to be plaed with """
    wordPlaying = choose_secret_word()
    first_game(wordPlaying)
    
def quit_game(msg):
    """"
        The string value of the argument taken determines whether the amount of wins should be incrimented
        and asks the users if they would like to play again.
    """
    global wins
    global totalGames
    totalGames +=1
    if msg == "You win!":
        wins +=1
        print(msg)
    else:
        print(msg)
     
    while True:
        quitGame = input("Shall we play again? y = yes, n = no:\n").lower()
        if quitGame == "n":
            print(game_stats(wins))
            break
        elif quitGame == "y":
            second_game()
            break
        else:
                print("Follow the rules! Please enter only y/n")

def game_stats(wins):
    """" The argument taken must be an integer for this to work, the average is calculated from the wins/totalGames played,
         the loses are calculated by subracting the wins from totalGames played. The returned value of wins and loses must equal
         the amount of total games played. 
    """
    loses = (totalGames-wins)
    averageInt = int((wins/totalGames)*100)
    averageFloa = float((wins%totalGames))
    completeAv = int(averageInt+averageFloa)
    thanks = "Thank you for playing! Here are your stats."
    message = (("TotalGames",totalGames),("Wins", wins), ("Loses", loses), ("Average percent of wins", completeAv))
    
    return thanks, message


""" Here is where the first game is called"""
first_game(word)
